import os
import time
import datetime

import telebot
import pandas as pd
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

from src.utils import main_keyboard, make_back_inline_button_markup, make_connect_markup, make_pay_markup, make_help_markup
from src.database import get_urls_from_db, add_url_to_db
from src.xray import XRaySSHInterface, encode_urls

load_dotenv(override=True)

engine = create_engine(f"postgresql+psycopg2://{os.environ['SQL_USER']}:{os.environ['SQL_PASS']}@{os.environ['SQL_HOST']}/{os.environ['SQL_DATABASE']}")

bot = telebot.TeleBot(token=os.environ["TELEBOT_API"])
prices_dict = {
    1: [telebot.types.LabeledPrice(label='1 –º–µ—Å—è—Ü', amount=1)],
    4: [telebot.types.LabeledPrice(label='4 –º–µ—Å—è—Ü', amount=4)],
    12: [telebot.types.LabeledPrice(label='12 –º–µ—Å—è—Ü', amount=12)],
}


@bot.message_handler(commands=["start"])
def handle_start(message):
    text_to_print = """–ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–≤–µ—Ä—Ö-–±—ã—Å—Ç—Ä–æ–µ –∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ VPN 

–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ Instagram –∏ YouTube –≤ 4K –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–Ω–∫–∏–Ω–≥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–π. –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö: —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞—Ö, –Ω–æ—É—Ç–±—É–∫–∞—Ö, –ø–ª–∞–Ω—à–µ—Ç–∞—Ö –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞—Ö. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–¥–æ–µ–¥–∞—é—â–∏—Ö –í–∫–ª/–í—ã–∫–ª VPN.

–î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 10 –¥–Ω–µ–π, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞.

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: @ledger_vpn_support

–ù–∞–∂–º–∏—Ç–µ ‚ö°Ô∏è–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚Üì –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
"""
    if not is_user_exists(message.chat.id):
        create_user(message.chat.id)

    keyboard = main_keyboard()
    bot.send_message(message.chat.id, text=text_to_print, reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    bot.delete_message(message.chat.id, message.id)

    if message.text == '–°—Ç–∞—Ç—É—Å':
        _status(message)
        
    elif message.text == '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è':
        _connect(message)

    elif message.text == '–û–ø–ª–∞—Ç–∏—Ç—å':
        _pay(message)

    elif message.text == '–ü–æ–º–æ—â—å':
        _help(message)


def _status(message):
    user_id = message.from_user.id
    if not is_active_user(user_id):
        response = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    else:
        with engine.begin() as connection:
            sql_query = f"""
                SELECT * 
                FROM subs 
                WHERE subs_id = {user_id}
            """
            df = pd.read_sql_query(sql_query, connection)
        end_time = df['date_end'][0]
        response = f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è `{end_time}`'
    markup = make_back_inline_button_markup()
    bot.send_message(message.chat.id, response, reply_markup=markup)


def _connect(message):
    markup = make_connect_markup()
    text = """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ 2 —à–∞–≥–∞:  

    1. –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å" - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    2. –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å" - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π"""
    bot.send_message(message.chat.id, text, reply_markup=markup)


def _pay(message):
    markup = make_pay_markup()
    text = """
    –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:

    350‚ÇΩ –≤ –º–µ—Å—è—Ü 
    300‚ÇΩ –≤ –º–µ—Å—è—Ü –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ 4 –º–µ—Å—è—Ü–∞
    250‚ÇΩ –≤ –º–µ—Å—è—Ü –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤

    üí≥ –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –±–∞–Ω–∫–∞, –°–ë–ü, –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –†–§ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π."""
    bot.send_message(message.chat.id, text=text, reply_markup=markup)


def _help(message):
    markup = make_help_markup()
    bot.send_message(message.chat.id, '–ü–æ–º–æ—â—å', reply_markup=markup)


@bot.callback_query_handler(lambda query: query.data == 'make_config')
def make_config(query):
    bot.edit_message_text(
        chat_id=query.from_user.id,
        text=f"–î–µ–ª–∞—é –∫–æ–Ω—Ñ–∏–≥",
        message_id=query.message.id,
    )

# def cook_user_xray_link(user_id, host_ids=[0]):
    
#     # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —É—Ä–ª–æ–≤ —é–∑–µ—Ä–æ–≤ –≤ –±–∞–∑–µ
#     urls = get_urls_from_db(engine, user_id, host_ids)
    
#     if len(urls) == 0:
        
#         for id_ in host_ids:
#             cwd_xray = "easy-xray-main"
            
#             xray_ssh_client = XRaySSHInterface(host_ip=os.environ[f'HOST_{id_}'],
#                                                username=os.environ[f'USER_{id_}'],
#                                                password=os.environ[f'PASS_{id_}'],
#                                                sudo_password=os.environ[f'PASS_{id_}'])
            
#             xray_ssh_client.add_xray_user(user_id, cwd=cwd_xray) # —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ xray
#             url = xray_ssh_client.get_xray_url(user_id, cwd=cwd_xray) # –≥–µ–Ω–µ—Ä–∏–º —É—Ä–ª
#             urls.append(url)
            
#             add_url_to_db(engine, user_id, id_, url) # –¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–ª –≤ –±–∞–∑—É
            
#     xray_link = encode_urls(urls) # –∫–æ–¥–∏—Ä—É–µ–º —É—Ä–ª—ã
    
#     return xray_link


@bot.callback_query_handler(lambda query: query.data in ["pay_1_month", "pay_4_month", "pay_12_month"])
def handle_buy(query):
    markup = telebot.types.InlineKeyboardMarkup()
    if query.data == 'pay_1_month':
        stars = telebot.types.InlineKeyboardButton("Telegram Stars", callback_data="buy_tg_stars_1")
        crypt = telebot.types.InlineKeyboardButton("Cryptomus", url="https://pay.cryptomus.com/pay/f60edfeb-b7de-4bfe-a06d-2a336f4fa8dc") #1
        yoomoney = telebot.types.InlineKeyboardButton("YooMoney", callback_data="buy_yoomoney")
        text = "–î–æ—Å—Ç—É–ø 1 –ú–µ—Å—è—Ü"
    elif query.data == 'pay_4_month':
        stars = telebot.types.InlineKeyboardButton("Telegram Stars", callback_data="buy_tg_stars_4")
        crypt = telebot.types.InlineKeyboardButton("Cryptomus", url="https://pay.cryptomus.com/pay/f60edfeb-b7de-4bfe-a06d-2a336f4fa8dc") #4
        yoomoney = telebot.types.InlineKeyboardButton("YooMoney", callback_data="buy_yoomoney")  
        text = text = "–î–æ—Å—Ç—É–ø 4 –ú–µ—Å—è—Ü–∞"
    else:
        stars = telebot.types.InlineKeyboardButton("Telegram Stars", callback_data="buy_tg_stars_12")
        crypt = telebot.types.InlineKeyboardButton("Cryptomus", url="https://pay.cryptomus.com/pay/f60edfeb-b7de-4bfe-a06d-2a336f4fa8dc") #12
        yoomoney = telebot.types.InlineKeyboardButton("YooMoney", callback_data="buy_yoomoney")          
        text = text = "–î–æ—Å—Ç—É–ø 12 –ú–µ—Å—è—Ü–µ–≤"
    markup.add(stars)
    markup.add(crypt)
    markup.add(yoomoney)
    #back button
    back = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    markup.add(back)
    bot.send_message(chat_id=query.message.chat.id, text=text, reply_markup=markup)
    return markup

@bot.callback_query_handler(lambda query: query.data in ["buy_tg_stars_1", "buy_tg_stars_4", "buy_tg_stars_12"])
def handle_buy(query):
    n = int(query.data.split('_')[-1])
    bot.send_invoice(
        chat_id=query.from_user.id, 
        title='–û–ø–ª–∞—Ç–∞ –≤ TG Stars', 
        description=f'–î–æ—Å—Ç—É–ø {n} –º–µ—Å—è—Ü–µ–≤',
        invoice_payload='subscription',
        currency='XTR',
        prices=prices_dict[n],
        provider_token=None,
    )


def is_active_user(user_id):
    with engine.begin() as conn:
        query = f"""
            SELECT * 
            FROM subs 
            WHERE subs_id = {user_id}
                AND date_end > '{datetime.datetime.now()}'
        """
        df = pd.read_sql_query(query, conn)
    return not df.empty


def is_user_exists(user_id):
    with engine.begin() as conn:
        query = f"""
            SELECT * 
            FROM users 
            WHERE subs_id = {user_id}
        """
        df = pd.read_sql_query(query, conn)
    return not df.empty


def create_user(user_id):
    with engine.begin() as connection:
        parameters = {
            "subs_id": user_id,
        }
        connection.execute(text('INSERT INTO users (subs_id) VALUES (:subs_id)'), parameters)
        connection.commit()


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    response = "–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ"
    user_id = message.from_user.id
    n_month = message.successful_payment.total_amount
    if not is_active_user(user_id):
        with engine.begin() as connection:
            connection.execute(text(f'DELETE FROM subs WHERE subs_id = {user_id}'))
            connection.commit()

        with engine.begin() as connection:
            start = datetime.datetime.now()
            end = start + datetime.timedelta(days=int(30) * n_month)
            parameters = {
                "subs_id": user_id,
                "date_start": start.strftime("%Y-%m-%d %H:%M:%S"),
                "date_end": end.strftime("%Y-%m-%d %H:%M:%S"),
            }
            connection.execute(text('INSERT INTO subs (subs_id, date_start, date_end) VALUES (:subs_id, :date_start, :date_end)'), parameters)
            connection.commit()
    else:
        with engine.begin() as connection:
            num_days = int(30 * n_month)
            update_query = f"""
                UPDATE subs 
                SET date_end = date_end + INTERVAL'{num_days} days'
                WHERE subs_id = {user_id}
            """
            connection.execute(text(update_query))
            connection.commit()
    
    with engine.begin() as connection:
        query = f"""
            SELECT * 
            FROM subs 
            WHERE subs_id = {user_id}
        """
        df = pd.read_sql_query(query, connection)
    end_time = df['date_end'][0]

    response += '\n' + f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è `{end_time}`'
    markup = telebot.types.InlineKeyboardMarkup()
    itembtn_str = telebot.types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
    markup.add(itembtn_str)

    bot.send_message(
        chat_id=message.chat.id,
        text=response,
        reply_markup=markup,
        parse_mode="Markdown",
    )


@bot.callback_query_handler(lambda query: query.data == 'back')
def handle_start_trading(query):
    bot.delete_message(query.from_user.id, query.message.id)


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(15)
